.. _overview:
.. default-role:: literal


Introduction to EPICS Device Support
====================================

The EPICS Device support module is designed to provide an easy to use but fully
functional interface to EPICS for device drivers.  The core mechanism provides
device support for records of the five basic Channel Access types (double,
32-bit integer, boolean, enumerations, strings) together with waveforms of these
types.

The module is used as follows:

1.  Initialise EPICS device support with the appropriate function calls.

2.  Dynamically create interfaces to all the records to be generated by the IOC.

3.  Call `iocInit`.

The functionality provided by this support module overlaps that provided by
Asyn, but the philosophy is very different.

The following sections document the various components provided by this module.
For each component there is a header file with the same name providing the
functionality documented here.

epics_device_:
    This is the core functionality provided by this support module, defining
    mechanisms for declaring and implementing EPICS record bindings for the
    eleven supported record types.

`epics_extra`_:
    This provides a number of extra facilities for writing EPICS driver support.

`persistence`_:
    This is an alternative mechanism to autosave/restore and provides tightly
    integrated support for persistent PV state over IOC restarts.

`pvlogging`_:
    This supports a simple mechanism for logging channel access writes to PVs.

`error`_:
    A generic error handling mechanism is used throughout this support module
    and the associated header file is available for use elsewere.

`hashtable`_:
    This is a hashtable implementation decent performance derived from Python's
    implementation of dictionaries.

.. _epics_device: epics_device.html
.. _epics_extra: epics_extra.html
.. _persistence: persistence.html
.. _pvlogging: pvlogging.html
.. _error: error.html
.. _hashtable: hashtable.html
