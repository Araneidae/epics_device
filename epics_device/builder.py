# This is boilerplate for picking up the iocbuilder definitions

import sys
import os


def import_builder(default):
    # All this palaver is to pick up the EPICS db builder version so that it can
    # be maintained properly.  A default path should be compiled into the local
    # file builder_path, but this setting can be overwritten by setting the
    # environment variable EPICSDBBUILDER
    builder_version = os.environ.get('EPICSDBBUILDER', default)
    assert builder_version is not None, 'EPICSDBBUILDER not defined'

    if builder_version == '':
        pass    # Assume db builder already on python path, do nothing more
    elif '/' in builder_version:
        sys.path.append(builder_version)    # Explicit path to builder install
    else:
        from pkg_resources import require
        require('epicsdbbuilder==%s' % builder_version)

    return __import__('epicsdbbuilder')


if __name__ == '__main__':
    # When run as a script print out the path to epicsdbbuilder
    epicsdbbuilder = import_builder(None)

    print '# Default path auto-generated by installation'
    print 'path = %r' % os.path.dirname(epicsdbbuilder.__path__[0])

else:
    # When imported as a module do what we need to do to find the epicsdbbuilder
    # before then importing it.
    from . import builder_path

    # Initialise the Db Builder and add our own DBD file
    epicsdbbuilder = import_builder(builder_path.path)

    # Complete the job by initialising the builder and loading our own DBD file.
    epicsdbbuilder.InitialiseDbd(os.environ['EPICS_BASE'])
    epicsdbbuilder.LoadDbdFile(
        os.path.join(os.path.dirname(__file__), '../dbd/epics_device.dbd'))
